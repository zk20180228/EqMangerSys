<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
        xmlns:mvc="http://www.springframework.org/schema/mvc"  
        xmlns:context="http://www.springframework.org/schema/context"  
        xmlns:aop="http://www.springframework.org/schema/aop"  
        xmlns:tx="http://www.springframework.org/schema/tx"  
        xsi:schemaLocation="  
            http://www.springframework.org/schema/context   
            http://www.springframework.org/schema/context/spring-context-3.2.xsd  
            http://www.springframework.org/schema/beans   
            http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
            http://www.springframework.org/schema/mvc   
            http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd  
            http://www.springframework.org/schema/aop   
            http://www.springframework.org/schema/aop/spring-aop-3.2.xsd  
            http://www.springframework.org/schema/tx   
            http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">  
	
	<bean id="dataSourceOne" class="com.mchange.v2.c3p0.ComboPooledDataSource">
			 <property name="driverClass" value="com.microsoft.sqlserver.jdbc.SQLServerDriver" /><!--com.microsoft.sqlserver.jdbc.SQLServerDriver  ${db.driver} -->
			  <!-- 开发环境-->
			<!--  jdbc:sqlserver://192.168.0.34:1433;DatabaseName=OPSMKJ  ${db.url} -->
			<property name="jdbcUrl" value="jdbc:sqlserver://192.168.0.3:1433;DatabaseName=MKJ_TEMP"/><!--HQUEUE-->
			 <property name="user" value="sa" />
			 <property name="password" value="HONRYNEWServer0615" /><!--honry-->
			<!--  生产 环境-->
			<!--  <property name="jdbcUrl" value="jdbc:sqlserver://129.1.168.65:1433;DatabaseName=HQUEUE"/>
			 <property name="user" value="sa" />
			 <property name="password" value="honry" />  -->
	</bean>
	
	<!--配置oracle数据源  -->
	<bean id="dataSourceTwo" class="com.mchange.v2.c3p0.ComboPooledDataSource"  >  
        <property name="driverClass" value="oracle.jdbc.driver.OracleDriver" />  
       	<!-- 开发环境-->
 		<property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.0.10:1521:honry" />  
        <property name="user" value="honry" />  
        <property name="password" value="honry" />  
         <!-- 生产 环境-->
    <!--     <property name="jdbcUrl" value="jdbc:oracle:thin:@129.1.3.236:1521:docare" />  
        <property name="user" value="ssmz" />  
        <property name="password" value="ssmz" />   -->
    </bean>
      
	<bean id="dataSource" class="com.zkhv.tongbu.DynamicDataSource">  
        <property name="targetDataSources">  
            <map key-type="java.lang.String">  
                <entry value-ref="dataSourceOne" key="dataSourceOne"></entry>  
                <entry value-ref="dataSourceTwo" key="dataSourceTwo"></entry>  
            </map>  
        </property>  
        <property name="defaultTargetDataSource" ref="dataSourceOne">  
        </property>  
    </bean>
	
	<!--配置sqlSeessionFactory工厂  -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
			<property name="dataSource" ref="dataSource"></property>
			<!--加载mybatis的全局配值文件  -->
			<property name="configLocation" value="classpath:myBatis-config.xml"></property>
			<!--配置 扫描加载sql映射文件，记得去掉全局配值文件中的mappers配置 -->

			<!-- <property name="mapperLocations" value="classpath:com/zkhv/*/dao/*.xml"></property> -->
			<property name="mapperLocations" >
            <list>
                <value>classpath:com/zkhv/*/dao/*.xml</value>
                <value>classpath:com/zkhv/*/*/dao/*.xml</value>
            </list>
        </property>

	</bean>
	
	<!--事务的配置  -->
	<!--事务管理器的配置  -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource"></property>	
	</bean>
	
	
	<!--事务增强配置  -->
	<tx:advice id="advice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 默认只处理运行时异常，可加rollback-for="Exception/Throwable"等处理所有异常或包括错误 -->
			<!-- 默认只回滚运行是异常，如果发生try...catch..中的异常，是不会回滚的。配置为Exception 则所有异常都回滚-->
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<!--支持当前事务，如果当前没有事务，就以非事务方式执行。   -->
			<tx:method name="select*" propagation="SUPPORTS" />
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="query*" propagation="SUPPORTS" />
			<!-- 支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 -->
			<tx:method name="*" propagation="REQUIRED" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	
	<!--切面配置  -->
	<aop:config>
		<!-- <aop:advisor advice-ref="advice" pointcut="execution(* com.zkhv.easyui.service.impl.*.*(..))"></aop:advisor> -->
		<!-- 扫描以Service结尾的bean-->
		<aop:advisor advice-ref="advice" pointcut="bean(*Service)"></aop:advisor>
	</aop:config>
	

	<!--配置SessionTimePlate模板实例  -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<!--注入sqlsessionFactory  -->
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</bean>
	
    
	<bean id="dataSourceInterceptor" class="com.zkhv.tongbu.DataSourceInterceptor" />
	<aop:config>
		<aop:aspect id="dataSourceAspect" ref="dataSourceInterceptor">
			<aop:pointcut id="dsSqlServer" expression="execution(* com.zkhv.tongbu.sqlServer.dao.*.*(..))" />
			<aop:pointcut id="dsOracle" expression="execution(* com.zkhv.tongbu.oracle.dao.*.*(..))" />
			<aop:pointcut id="aa" expression="execution(* com.zkhv.mkjview.dao.*.*(..))" />
			<aop:pointcut id="bb" expression="execution(* com.zkhv.equipment.dao.*.*(..))" />
			<aop:pointcut id="cc" expression="execution(* com.zkhv.user.dao.*.*(..))" />
			<aop:pointcut id="dd" expression="execution(* com.zkhv.command.dao.*.*(..))" />
			<aop:pointcut id="ee" expression="execution(* com.zkhv.log.dao.*.*(..))" />
			<aop:before method="setdataSourceSqlServer" pointcut-ref="dsSqlServer"/>
			<aop:before method="setdataSourceOracle" pointcut-ref="dsOracle"/>
			<aop:before method="setdataSourceSqlServer" pointcut-ref="aa"/>
			<aop:before method="setdataSourceSqlServer" pointcut-ref="bb"/>
			<aop:before method="setdataSourceSqlServer" pointcut-ref="cc"/>
			<aop:before method="setdataSourceSqlServer" pointcut-ref="dd"/>
			<aop:before method="setdataSourceSqlServer" pointcut-ref="ee"/>
		</aop:aspect>
	</aop:config>
	
	 <!-- 加载定时器配置 -->
	 <import resource="quartz.xml"/> 
	
	<!--mapper代理对象的配置  -->
	<bean  class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--注入sqlSessionFactory  -->
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>	
		<property name="basePackage" value="com.zkhv.*.dao,com.zkhv.*.*.dao"></property>
	</bean>
	
	
	<!--开启注解扫描，但是要把Controller创建交给spring-mvc.xml配置文件，如果不去除，会影响事务  -->
	<context:component-scan base-package="com.zkhv">
		<!--不包括控制层  -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	
	
</beans>      



  